name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'python_backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'python_backend/**'

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # ============= Code Quality Checks =============
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd python_backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install black ruff mypy pytest-cov
      
      - name: Run Black (Code Formatter Check)
        run: |
          cd python_backend
          black --check app/ tests/
      
      - name: Run Ruff (Linter)
        run: |
          cd python_backend
          ruff check app/ tests/
      
      - name: Run MyPy (Type Checker)
        run: |
          cd python_backend
          mypy app/ --ignore-missing-imports
        continue-on-error: true

  # ============= Security Scanning =============
  security-scan:
    name: Security Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd python_backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit
      
      - name: Run Safety (Dependency Security Check)
        run: |
          cd python_backend
          safety check --json || true
      
      - name: Run Bandit (Security Linter)
        run: |
          cd python_backend
          bandit -r app/ -f json || true

  # ============= Unit & Integration Tests =============
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: hr_user
          POSTGRES_PASSWORD: hr_password
          POSTGRES_DB: hr_system_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd python_backend
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run Unit Tests
        env:
          DATABASE_URL: postgresql://hr_user:hr_password@localhost:5432/hr_system_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test_secret_key_for_testing_only
          SECRET_KEY: test_secret_key_for_testing_only
          ENVIRONMENT: test
        run: |
          cd python_backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html
      
      - name: Check Test Coverage
        run: |
          cd python_backend
          # Extract coverage percentage and enforce minimum
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); print(root.attrib['line-rate'])" 2>/dev/null || echo "0")
          COVERAGE_PERCENT=$(python -c "print(int(float($COVERAGE) * 100))" 2>/dev/null || echo "0")
          echo "Current test coverage: ${COVERAGE_PERCENT}%"
          
          # Enforce minimum 20% coverage for now (gradually increase)
          if [ "$COVERAGE_PERCENT" -lt 20 ]; then
            echo "❌ Test coverage ${COVERAGE_PERCENT}% is below minimum threshold of 20%"
            echo "ℹ️  Target: 80% coverage. Add more tests to increase coverage."
            exit 1
          else
            echo "✅ Test coverage ${COVERAGE_PERCENT}% meets minimum threshold"
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./python_backend/coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ============= Build Docker Image =============
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ashour158/hr-system
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./python_backend
          file: ./python_backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ashour158/hr-system:buildcache
          cache-to: type=registry,ref=ashour158/hr-system:buildcache,mode=max

  # ============= Deploy to Staging =============
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging-api.hr-system.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # For example: kubectl, helm, or cloud provider CLI
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

  # ============= Deploy to Production =============
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.hr-system.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here
      
      - name: Run smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add smoke test commands
      
      - name: Notify deployment
        if: always()
        run: |
          echo "Sending deployment notification..."
          # Add notification logic (Slack, email, etc.)

  # ============= Performance Tests =============
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd python_backend
          pip install --upgrade pip
          pip install locust httpx
      
      - name: Run performance tests
        run: |
          cd python_backend
          if [ -f tests/performance/locustfile.py ]; then
            echo "Running Locust performance tests..."
            locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 2m --host=http://localhost:8000 || true
          else
            echo "Performance tests not yet implemented"
          fi
        continue-on-error: true
      
      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: python_backend/performance-results.html
          if-no-files-found: ignore
