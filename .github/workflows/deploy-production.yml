name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-suite:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_hr_system
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd python_backend
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio httpx
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run backend tests
      run: |
        cd python_backend
        pytest --cov=app --cov-report=xml --cov-report=html --tb=short
      env:
        DATABASE_URL: sqlite+aiosqlite:///./test.db
        JWT_SECRET_KEY: test-secret-key
        SECRET_KEY: test-secret-key
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:coverage:ci || npm run test
    
    - name: Run E2E tests
      run: |
        cd frontend
        npx playwright install
        npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          python_backend/coverage.xml
          frontend/coverage/coverage-final.json
          frontend/test-results/

  smoke-tests:
    runs-on: ubuntu-latest
    needs: test-suite
    if: success()

    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30
    
    - name: Run smoke tests
      run: |
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend
        curl -f http://localhost:3000 || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/api/v1/health || exit 1
    
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.yml down

  build-images:
    runs-on: ubuntu-latest
    needs: [test-suite, smoke-tests]
    if: success()

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./python_backend
        push: true
        tags: |
          hrms/backend:latest
          hrms/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          hrms/frontend:latest
          hrms/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-images
    if: success()
    environment: production

    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          cd /opt/hrms
          git pull origin main
          docker-compose -f docker-compose.production.yml pull
          docker-compose -f docker-compose.production.yml up -d
          docker system prune -f
    
    - name: Health check
      run: |
        sleep 60
        curl -f http://${{ secrets.DROPLET_HOST }}/health || exit 1

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure()

    steps:
    - name: Rollback deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: ${{ secrets.DROPLET_USERNAME }}
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          cd /opt/hrms
          docker-compose -f docker-compose.production.yml down
          docker-compose -f docker-compose.production.yml up -d

  notify:
    runs-on: ubuntu-latest
    needs: [deploy, rollback]
    if: always()

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
