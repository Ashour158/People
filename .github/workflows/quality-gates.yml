name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============= FRONTEND QUALITY GATES =============
  frontend-quality:
    name: Frontend Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    # ESLint Quality Gate
    - name: ESLint Quality Gate
      working-directory: ./frontend
      run: |
        echo "üîç Running ESLint quality gate..."
        npm run lint
        echo "‚úÖ ESLint quality gate passed"
    
    # Prettier Quality Gate
    - name: Prettier Quality Gate
      working-directory: ./frontend
      run: |
        echo "üé® Running Prettier quality gate..."
        npm run format:check
        echo "‚úÖ Prettier quality gate passed"
    
    # TypeScript Quality Gate
    - name: TypeScript Quality Gate
      working-directory: ./frontend
      run: |
        echo "üìù Running TypeScript quality gate..."
        npm run typecheck
        echo "‚úÖ TypeScript quality gate passed"
    
    # Frontend Tests Quality Gate
    - name: Frontend Tests Quality Gate
      working-directory: ./frontend
      run: |
        echo "üß™ Running frontend tests quality gate..."
        npm run test:coverage:ci
        echo "‚úÖ Frontend tests quality gate passed"
    
    # Build Quality Gate
    - name: Build Quality Gate
      working-directory: ./frontend
      run: |
        echo "üèóÔ∏è Running build quality gate..."
        npm run build
        echo "‚úÖ Build quality gate passed"

  # ============= BACKEND QUALITY GATES =============
  backend-quality:
    name: Backend Quality Gates
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: hr_system_test
          POSTGRES_USER: hr_user
          POSTGRES_PASSWORD: hr_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: python_backend/requirements.txt
    
    - name: Install backend dependencies
      working-directory: ./python_backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff mypy pytest-cov pytest-asyncio httpx
    
    # Black Quality Gate
    - name: Black Quality Gate
      working-directory: ./python_backend
      run: |
        echo "üé® Running Black quality gate..."
        black --check app/ tests/
        echo "‚úÖ Black quality gate passed"
    
    # Ruff Quality Gate
    - name: Ruff Quality Gate
      working-directory: ./python_backend
      run: |
        echo "üîç Running Ruff quality gate..."
        ruff check app/ tests/
        echo "‚úÖ Ruff quality gate passed"
    
    # MyPy Quality Gate
    - name: MyPy Quality Gate
      working-directory: ./python_backend
      run: |
        echo "üìù Running MyPy quality gate..."
        mypy app/ --ignore-missing-imports
        echo "‚úÖ MyPy quality gate passed"
    
    # Backend Tests Quality Gate
    - name: Backend Tests Quality Gate
      working-directory: ./python_backend
      run: |
        echo "üß™ Running backend tests quality gate..."
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80
        echo "‚úÖ Backend tests quality gate passed"
      env:
        DATABASE_URL: postgresql://hr_user:hr_password@localhost:5432/hr_system_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key

  # ============= SECURITY QUALITY GATES =============
  security-quality:
    name: Security Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Python Security Scan
    - name: Python Security Scan
      working-directory: ./python_backend
      run: |
        echo "üîí Running Python security scan..."
        pip install safety bandit
        safety check || true
        bandit -r app/ -ll || true
        echo "‚úÖ Python security scan completed"
    
    # Frontend Security Scan
    - name: Frontend Security Scan
      working-directory: ./frontend
      run: |
        echo "üîí Running frontend security scan..."
        npm ci
        npm audit --audit-level=moderate || true
        echo "‚úÖ Frontend security scan completed"
    
    # Secret Detection
    - name: Secret Detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --json --only-verified
      continue-on-error: true

  # ============= PERFORMANCE QUALITY GATES =============
  performance-quality:
    name: Performance Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    # Frontend Bundle Analysis
    - name: Frontend Bundle Analysis
      working-directory: ./frontend
      run: |
        echo "üìä Running frontend bundle analysis..."
        npm ci
        npm run build
        echo "‚úÖ Frontend bundle analysis completed"
    
    # Performance Budget Check
    - name: Performance Budget Check
      working-directory: ./frontend
      run: |
        echo "‚ö° Checking performance budget..."
        # Add performance budget checks here
        echo "‚úÖ Performance budget check completed"

  # ============= ACCESSIBILITY QUALITY GATES =============
  accessibility-quality:
    name: Accessibility Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    # Accessibility Testing
    - name: Accessibility Testing
      working-directory: ./frontend
      run: |
        echo "‚ôø Running accessibility tests..."
        # Add accessibility testing here
        echo "‚úÖ Accessibility tests completed"

  # ============= QUALITY GATE SUMMARY =============
  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, security-quality, performance-quality, accessibility-quality]
    if: always()
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "üìä Quality Gate Summary"
        echo "======================"
        echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
        echo "Backend Quality: ${{ needs.backend-quality.result }}"
        echo "Security Quality: ${{ needs.security-quality.result }}"
        echo "Performance Quality: ${{ needs.performance-quality.result }}"
        echo "Accessibility Quality: ${{ needs.accessibility-quality.result }}"
        
        if [[ "${{ needs.frontend-quality.result }}" == "success" && 
              "${{ needs.backend-quality.result }}" == "success" && 
              "${{ needs.security-quality.result }}" == "success" && 
              "${{ needs.performance-quality.result }}" == "success" && 
              "${{ needs.accessibility-quality.result }}" == "success" ]]; then
          echo "üéâ All quality gates passed!"
          exit 0
        else
          echo "‚ùå Some quality gates failed!"
          exit 1
        fi
